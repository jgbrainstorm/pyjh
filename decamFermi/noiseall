#! /usr/bin/env python
"""
standalone code to calculate the noise for all extensions of the ccds images from imager. the ccd file needs to be the standard DES ccd fits image with the convention of 1 extension corresponding to 2k x 4k with overscans on the sides.
Created by: Jiangang Hao @ Fermilab, 9/4/2010 
"""

import sys
if len(sys.argv) == 1:
    print 'syntax: noiseall imageName'
else:
    import numpy as np
    import pyfits as pf
    hdu=pf.open(sys.argv[1])
    nn=len(hdu)
    ccd=[]
    noise=[]
    print '----extension----Position----noiseL (ADU)---minL ---maxL----noiseR (ADU)---minR ---maxR'
    for i in np.arange(1,nn,1):
        b=pf.getdata(sys.argv[1],i)
        hdr=pf.getheader(sys.argv[1],i)
        noiseL=np.std(b[300:600,10:50])
        noiseR=np.std(b[300:600,2110:2150])
        minL=np.min(b[300:600,1035:1060])
        maxL=np.max(b[300:600,1035:1060])
        minR=np.min(b[300:600,1085:1100])
        maxR=np.max(b[300:600,1085:1100])
        ccd.append(hdr['detpos']+'_L')
        ccd.append(hdr['detpos']+'_R')
        noise.append(noiseL)
        noise.append(noiseR)
        print i,'--',hdr['detpos'],'---',noiseL,'----',minL,'----',maxL,'----',noiseR,'----',minR,'----',maxR,'----'

    noise=np.array(noise)
    f = open('noise.txt', 'w')
    for j in range(len(ccd)):
        f.write(ccd[j]+'   '+str(round(noise[j],4))+'\n')
    f.close()
        
    print '---- noise analysis complete ----'

    
